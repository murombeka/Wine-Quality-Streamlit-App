# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aH0Hg_FcXBdeQcOXCZtREaOBZU_l6ABW
"""


import streamlit as st
import numpy as np
from joblib import load

# Load the trained model
model = load('wine_quality_model.joblib')

# Streamlit app title
st.title("Privyman Wine Quality Classifier (Red or White)")

# Instructions
st.write("""
This app classifies wines into **Red** or **White** based on their physicochemical properties.
Enter the following wine properties to get the classification result.
""")

# Define the features expected by the model, including 'quality'
expected_features = [
    "Fixed Acidity", "Volatile Acidity", "Citric Acid", "Residual Sugar",
    "Chlorides", "Free Sulfur Dioxide", "Total Sulfur Dioxide", 
    "Density", "pH", "Sulphates", "Alcohol", "Quality"
]

# Create input fields for features
input_data = []
for feature in expected_features:
    if feature == "Quality":
        # Quality is an integer value, so use number_input with step=1
        value = st.number_input(feature, min_value=3, max_value=9, step=1, value=5)
    else:
        # For other features, use number_input with float values
        value = st.number_input(feature, min_value=0.0, value=0.0)
    input_data.append(value)

# Convert input list into a numpy array and reshape
input_array = np.array(input_data).reshape(1, -1)

# Predict button
if st.button("Predict"):
    try:
        prediction = model.predict(input_array)
        wine_type = "Red Wine" if prediction[0] == 1 else "White Wine"
        st.success(f"The model predicts: **{wine_type}**")
    except ValueError as e:
        st.error(f"Prediction failed. Error: {e}")
